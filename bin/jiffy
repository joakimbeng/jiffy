#!/usr/bin/env node

var printer = require('../lib/printer'),
    cli = require('../lib/cli'),
    q = require('q');

var commands = [
  {name: 'build', description: 'Build the blog', default: true},
  {name: 'init', description: 'Initialize a new blog in the current folder'},
  {name: 'new-theme', description: 'Create a new theme, with default theme as boilerplate'}
];

params = cli.init(commands);

switch (params.command) {
  case 'init':
    init();
    break;
  case 'build':
    build();
    break;
  case 'new-theme':
    newTheme();
    break;
}

function init () {
  q.try(function () {
    return require('../lib/initializer');
  })
  .then(function (initializer) {
    return initializer.initialize()
      .then(build)
      .then(function () {
        printer.ok('\nOpen the build/index.html in your browser to view the result!\n');
      });
  })
  .fail(printer.fatal);
}

function build () {
  return q.try(function () {
      return [
        require('../lib/reader'),
        require('../lib/builder')
      ]
    })
    .spread(function (reader, builder) {
      var started = Date.now();
      printer.info('Building...\n');

      return reader.read()
        .then(builder.build)
        .then(function () {
          printer.ok('Build done in ' + ((Date.now() - started)/1000).toFixed(2) + ' s\n');
        });
    })
    .fail(printer.fatal);
}

function newTheme () {
  var fs = require('../lib/fs'),
      path = require('../lib/path'),
      ask = require('../lib/cli').ask,
      printer = require('../lib/printer');
  q.try(function () {
    return require('../lib/settings');
  })
  .then(function (settings) {
    return ask('What do you want to name your new theme?');
  })
  .then(function (themeName) {
    return [themeName, fs.exists(path.join(process.cwd(), 'themes', themeName))];
  })
  .spread(function (themeName, exists) {
    if (exists)
      throw new Error('The theme: "' + themeName + '" already exists!');
    printer.info('\nCopying default theme...\n');
    return [themeName, fs.copyDir(path.join(__dirname, '..', 'themes', 'default'), path.join(process.cwd(), 'themes', themeName))];
  })
  .spread(function (themeName) {
    printer.info('Theme "' + themeName + '" created in: ./themes/' + themeName + '\n\n');
    return [themeName, ask('Do you want to set the blog theme to: "' + themeName + '"?', {default: 'y', type: 'boolean'})];
  })
  .spread(function (themeName, apply) {
    if (!apply)
      return;
    return fs.readJson('jiffy.json')
      .then(function (json) {
        json.theme = themeName;
        printer.info('\nThis will be your new jiffy.json:\n\n');
        return [printer.json(json, 'CARROT'), ask('\nDoes this look ok?', {default: 'y', type: 'boolean'})];
      })
      .spread(function (prettyJson, doSave) {
        if (!doSave) {
          printer.error('Exiting...\n');
          process.exit();
          return;
        }
        printer.info('\nSaving json...\n');
        return fs.writeFile('jiffy.json', prettyJson, 'utf8');
      });
  })
  .then(function () {
    printer.ok('\nDone!\n');
  })
  .fail(printer.fatal);
}
